---
import Layout from '../../layouts/Layout.astro';
import { client, urlFor, portableTextToHtml } from '../../lib/sanity';
import type { Project } from '../../lib/sanity-types';

// Renderizzazione dinamica SSR - no prerender per contenuti CMS
// getStaticPaths ritorna array vuoto perché usiamo SSR on-demand

export async function getStaticPaths() {
  return [];
}

const { slug } = Astro.params;

const project = await client.fetch<Project | null>(`
  *[_type == "project" && slug.current == $slug][0] {
    _id,
    title,
    description,
    country,
    duration,
    heroImage,
    body,
    embedCode,
    gallery[] {
      asset,
      alt,
      caption
    },
    "slug": slug.current
  }
`, { slug });

if (!project) {
  return Astro.redirect('/404');
}
const contentHtml = project.body ? await portableTextToHtml(project.body) : '';
---

<Layout title={project.title} description={project.description}>
  <!-- Hero Section -->
  <section class="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-16">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl md:text-5xl font-bold mb-6">
          {project.title}
        </h1>
        <p class="text-xl text-blue-100 mb-8">
          {project.description}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <div class="bg-white/20 px-6 py-3 rounded-lg">
            <span class="text-sm font-semibold">Paese</span>
            <p class="text-lg">{project.country}</p>
          </div>
          <div class="bg-white/20 px-6 py-3 rounded-lg">
            <span class="text-sm font-semibold">Durata</span>
            <p class="text-lg">{project.duration}</p>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Content Section -->
  <section class="py-16">
    <div class="container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        {project.heroImage && (
          <img 
            src={urlFor(project.heroImage).width(1200).url()} 
            alt={project.heroImage.alt || project.title}
            class="w-full rounded-lg mb-8 shadow-lg"
          />
        )}
        <div class="prose prose-lg max-w-none" set:html={contentHtml}>
        </div>
        
        {project.embedCode && (
          <div class="mt-12 embed-container">
            <h3 class="text-2xl font-bold mb-6 text-gray-800">Presentazione del Progetto</h3>
            <div class="embed-wrapper" set:html={project.embedCode}></div>
          </div>
        )}
      </div>
    </div>
  </section>

  <!-- Gallery Section -->
  {project.gallery && project.gallery.length > 0 ? (
    <section class="py-16 bg-gray-50">
      <div class="container mx-auto px-4">
        <div class="max-w-6xl mx-auto">
          <h2 class="text-3xl font-bold mb-8 text-gray-800 text-center">Gallery del Progetto</h2>
          
          <!-- Grid Gallery -->
          <div class="gallery-grid grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {project.gallery.map((image: any, index: number) => (
              <div class="gallery-item relative overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 cursor-pointer group"
                   data-index={index}>
                <img 
                  src={urlFor(image).width(400).height(300).fit('crop').url()} 
                  alt={image.alt || `Immagine ${index + 1}`}
                  class="w-full h-64 object-cover transition-transform duration-300 group-hover:scale-110"
                  loading="lazy"
                />
                {image.caption && (
                  <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <p class="text-white text-sm">{image.caption}</p>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Lightbox -->
    <div id="lightbox" class="lightbox fixed inset-0 z-50 bg-black/95 items-center justify-center hidden">
      <button id="lightbox-close" class="absolute top-4 right-4 text-white text-4xl font-light hover:text-gray-300 transition-colors z-10">
        &times;
      </button>
      
      <button id="lightbox-prev" class="absolute left-4 top-1/2 -translate-y-1/2 text-white text-5xl font-light hover:text-gray-300 transition-colors z-10 bg-black/50 rounded-full w-14 h-14 flex items-center justify-center">
        ‹
      </button>
      
      <button id="lightbox-next" class="absolute right-4 top-1/2 -translate-y-1/2 text-white text-5xl font-light hover:text-gray-300 transition-colors z-10 bg-black/50 rounded-full w-14 h-14 flex items-center justify-center">
        ›
      </button>

      <div class="lightbox-content max-w-7xl max-h-[90vh] w-full px-4">
        <img id="lightbox-img" src="" alt="" class="w-full h-full object-contain max-h-[80vh]" />
        <div id="lightbox-caption" class="text-white text-center mt-4 text-lg"></div>
        <div id="lightbox-counter" class="text-white text-center mt-2 text-sm opacity-75"></div>
      </div>
    </div>

    <script define:vars={{ 
      gallery: project.gallery,
      projectId: import.meta.env.PUBLIC_SANITY_PROJECT_ID,
      dataset: import.meta.env.PUBLIC_SANITY_DATASET
    }}>
      // Gallery Lightbox Script
      let currentIndex = 0;
      const lightbox = document.getElementById('lightbox');
      const lightboxImg = document.getElementById('lightbox-img');
      const lightboxCaption = document.getElementById('lightbox-caption');
      const lightboxCounter = document.getElementById('lightbox-counter');
      const galleryItems = document.querySelectorAll('.gallery-item');
      
      function openLightbox(index) {
        currentIndex = index;
        updateLightbox();
        lightbox.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
      
      function closeLightbox() {
        lightbox.classList.add('hidden');
        document.body.style.overflow = '';
      }
      
      function updateLightbox() {
        const image = gallery[currentIndex];
        
        // Costruisci URL Sanity corretto
        const ref = image.asset._ref;
        const dimensions = ref.split('-')[2];
        const format = ref.split('-')[3];
        const id = ref.replace('image-', '').replace(`-${dimensions}-${format}`, '');
        const sanityUrl = `https://cdn.sanity.io/images/${projectId}/${dataset}/${id}-${dimensions}.${format}?w=1920&q=85`;
        
        lightboxImg.src = sanityUrl;
        lightboxImg.alt = image.alt || `Immagine ${currentIndex + 1}`;
        lightboxCaption.textContent = image.caption || '';
        lightboxCounter.textContent = `${currentIndex + 1} / ${gallery.length}`;
      }
      
      function nextImage() {
        currentIndex = (currentIndex + 1) % gallery.length;
        updateLightbox();
      }
      
      function prevImage() {
        currentIndex = (currentIndex - 1 + gallery.length) % gallery.length;
        updateLightbox();
      }
      
      // Event listeners
      galleryItems.forEach((item, index) => {
        item.addEventListener('click', () => openLightbox(index));
      });
      
      document.getElementById('lightbox-close')?.addEventListener('click', closeLightbox);
      document.getElementById('lightbox-next')?.addEventListener('click', nextImage);
      document.getElementById('lightbox-prev')?.addEventListener('click', prevImage);
      
      // Click fuori dall'immagine per chiudere
      lightbox?.addEventListener('click', (e) => {
        if (e.target === lightbox) {
          closeLightbox();
        }
      });
      
      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (!lightbox.classList.contains('hidden')) {
          if (e.key === 'Escape') closeLightbox();
          if (e.key === 'ArrowRight') nextImage();
          if (e.key === 'ArrowLeft') prevImage();
        }
      });

      // Touch support per mobile
      let touchStartX = 0;
      let touchEndX = 0;
      
      lightbox?.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      });
      
      lightbox?.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        handleSwipe();
      });
      
      function handleSwipe() {
        if (touchEndX < touchStartX - 50) nextImage();
        if (touchEndX > touchStartX + 50) prevImage();
      }
    </script>
  ) : null}

  <!-- CTA Section -->
  <section class="py-16 bg-gray-50">
    <div class="container mx-auto px-4 text-center">
      <h2 class="text-3xl font-bold mb-6 text-gray-800">
        Vuoi Partecipare a Questo Progetto?
      </h2>
      <p class="text-xl text-gray-600 mb-8">
        Contattaci per maggiori informazioni sui requisiti e le procedure di candidatura.
      </p>
      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        <a href="/contatti" class="bg-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors">
          Contattaci
        </a>
        <a href="/progetti" class="border-2 border-blue-600 text-blue-600 px-8 py-3 rounded-lg font-semibold hover:bg-blue-600 hover:text-white transition-colors">
          Altri Progetti
        </a>
      </div>
    </div>
  </section>
</Layout>
